{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGVC,mBAAS,IAHC,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAqB9C,OACI,sBAAMC,SAZW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAKtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAOf,EAAMgB,IAAQN,IAC1B,kCAAMA,EAAN,WCNCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBxC,OAjBAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAICC,QAAQC,IAAKF,GACbH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAM1B,CAAEpB,IAEEqB,EDvB2BO,CAAc5B,GAAlCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,KAGnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdzBkB,EAAe,WAAM,MAIM3C,mBAAS,CAAC,cAJhB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADJA,Y,MCvBpC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.63ccdbe7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    //Manejos de estados\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        \n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        \n        if (inputValue.trim().length > 2) {\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit= { handleSubmit }>\n            <input\n                type=\"text\"\n                value= { inputValue }\n                onChange= { handleInputChange }\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=6dRD4yDrBCuAXif9JC59xsuheMT9A1V1`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n    // console.log(gifs);\n    // setImages(gifs);\n}","import React from 'react';\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    // console.log( 'GifItem' )\n    // console.log( { id, title, url } )\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src= { url } alt = { title } />\n            <p> { titleÂ } </p>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category }</h3>\n\n            {/* { loading ? <p>Loading</p> : null } */}\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    );\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n//TEMA: CUSTOM HOOKS\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // //Solo se dispara solo unica vez, Inicialzia una sola vez\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n\n                // setTimeout( () => {\n                    \n                    console.log( imgs );\n                    setState({\n                        data: imgs,\n                        loading: false\n                    }) \n\n                // }, 3000);\n            });\n        //getGifs();\n    }, [ category ])\n\n    return state; //Retorna { data: [], loading: true }\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n//import ReactDOM from 'react-dom';\n\nexport const GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleApp = () => {\n    //     //seCategories([...categories, 'HunterXHunter']) // permite establecer nuevo valor para los HOOKS con estados.\n    //     seCategories( cats => [...categories, 'HunterXHunter']); \n    // }\n\n    return (\n        <> \n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories= { setCategories } />\n            <hr/>\n\n            {/* <button onClick={ handleApp }>Agregar</button> */}\n\n            <ol>\n                {\n                    categories.map( category  => ( \n                        <GifGrid \n                            key = { category }\n                            category= { category } \n                        /> \n                    ))\n                }\n            </ol>\n\n\n        </>\n    );\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}